Nolan Dyer
Professor Hauschild
CMPSCI 4760
3/14/23

Project 3: Adding simple message queue


This program serves to execute a user-specified number of processes. The executed program, oss.cpp, will call the worker.cpp program a various number of times which retrieves the process and parent process IDs along with the time limit for the worker processes. 

The oss.cpp program accepts 5 arguments: -h, -n, -s, -t, and -f. Each of these arguments, besides -h, must be followed up with an integer, -t requires two integers, and -f can be any string of characters. -h brings up the help menu and then terminates the program, -n specifies how many children processes you wish to create, -s specifies how many chlidren processes can run simultaneously, -t is how long each worker process should run for in seconds and nanoseconds, and -f specifies the name for the log file for which oss outputs its process table to. The arguments passed for -t will be used to obtain a random number between 1 and the number provided for both seconds and nanoseconds.

To begin, first use the "make" command to compile the necessary output files. Then, use the command "./oss.out" along with your desired arguments. For example, if I wished to create a total of 10 children processes, limit the amount of simultaneous processes to 2, allow each worker process to run for a maximum of 3 seconds and 100000 nanoseconds, and name the output file "Log", I would use the command "./oss.out -n 10 -s 2 -t 3 100000 -f Log".

Overall, I did not face any extremely difficult errors while working on this project. The biggest issue I faced is that I noticed each worker was obtaining the same run time from the message queue which was caused from a misplaced srand() call. Other than that, coding this project was pretty straight forward and I did not run into any other issues. 
